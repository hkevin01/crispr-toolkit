[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "crispr-toolkit"
version = "0.1.0"
description = "AI/ML-powered CRISPR analysis platform for aging research"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "CRISPR Toolkit Team", email = "contact@crisprToolkit.org" },
]
maintainers = [
    { name = "CRISPR Toolkit Team", email = "contact@crisprToolkit.org" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["CRISPR", "aging", "bioinformatics", "machine-learning", "genomics"]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    "torch>=1.12.0",
    "biopython>=1.79",
    "fastapi>=0.75.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "isort>=5.10.0",
]
docs = ["sphinx>=4.5.0", "sphinx-rtd-theme>=1.0.0"]
full = [
    "transformers>=4.20.0",
    "pytorch-lightning>=1.6.0",
    "plotly>=5.0.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/username/crispr-toolkit"
Documentation = "https://crispr-toolkit.readthedocs.io"
Repository = "https://github.com/username/crispr-toolkit"
"Bug Tracker" = "https://github.com/username/crispr-toolkit/issues"

[project.scripts]
crispr-aging = "crispr_toolkit.cli.aging_cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
crispr_toolkit = ["data/schemas/*.json", "data/examples/*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["crispr_toolkit"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
